2+3
2^3+5
6/2+(8+5)
2 ^ 3 + (5)
scores <- c(22, 34, 18, 29, 36)
scores
names = c("Kevin", "Tom", "Edward", "Jack", "Isaac")
names
mean(scores)
sd(scores)
summary(scores)
Scores = c(23, 34, 18, 29, 33)
cor(scores, Scores)
SATGPA20R = read.table("SATGPA20.txt", header = T)
SATGPA20R
apply(SATGPA20R, 2, mean)
attach(SATGPA20R) # Make objects in SATGPA20R searchable
mean(GPA)
IQ = c(110, 95, 140, 89, 102)
CS = c(59, 40, 62, 40, 55)
WQ = c(2, 4, 5, 1, 3)
all_data = data.frame(IQ, CS, WQ)
all_data
apply(all_data, 2, mean)
data = c(2, 4, 6, NA, 10)
mean(data, na.rm = T)
SATGPA25R = read.table("SATGPA25.txt", header = T)
SATGPA25R
apply(SATGPA25R, 2, mean, na.rm = T)
hist(SATM)
boxplot(SATM)
boxplot(SATV, SATM)
RS = c(12, 14, 16, 18, 25)  # x
MS = c(10, 8, 16, 12, 20)   # y
plot(RS, MS)
# Line of best fit
res = lm(MS~RS) # fitting linear model
abline(res)
plot(RS, MS, xlim = c(10,25), ylim = c(5, 25))
plot(RS, MS, pch = 3)
plot(RS, MS, pch = 3, lwd = 5)
plot(RS, MS, xlab = "Reading score", ylab = "Math score")
SATGPA20R = read.table("SATGPA20.txt", header = T)
SATGPA20R
apply(SATGPA20R, 2, mean)
attach(SATGPA20R) # Make objects in SATGPA20R searchable
mean(GPA)
IQ = c(110, 95, 140, 89, 102)
CS = c(59, 40, 62, 40, 55)
WQ = c(2, 4, 5, 1, 3)
all_data = data.frame(IQ, CS, WQ)
all_data
apply(all_data, 2, mean)
data = c(2, 4, 6, NA, 10)
mean(data, na.rm = T)
SATGPA25R = read.table("SATGPA25.txt", header = T)
SATGPA25R
apply(SATGPA25R, 2, mean, na.rm = T)
hist(SATM)
boxplot(SATM)
boxplot(SATV, SATM)
RS = c(12, 14, 16, 18, 25)  # x
MS = c(10, 8, 16, 12, 20)   # y
plot(RS, MS)
# Line of best fit
res = lm(MS~RS) # fitting linear model
abline(res)
plot(RS, MS, xlim = c(10,25), ylim = c(5, 25))
plot(RS, MS, pch = 3)
plot(RS, MS, pch = 3, lwd = 5)
plot(RS, MS, xlab = "Reading score", ylab = "Math score")
(17*0.35)^(1/3)
log(10)
exp(1)
3^-1
# Normal assignment
a <- -12.6
a
# Concatenating
b <- c(1, 3, 5, 7, 9)
b
# Assigning values to variable using user input
# c <- scan()
# c
# Assigning sequence of values
x <- 1:6
x
y <- seq(1, 0, -0.2)
y
# Repeat characters
rep("A", 5)
# Repeat a sequence
rep(1:5, 2)
# Repeat elements of a sequence
rep(1:5, rep(2, 5))   # rep(1:5, c(2,2,2,2,2))
# Specify repeat times for each elements
rep(c(5, 1, 4), c(6, 1, 2))
(17*0.35)^(1/3)
log(10)
exp(1)
3^-1
# Normal assignment
a <- -12.6
a
# Concatenating
b <- c(1, 3, 5, 7, 9)
b
# Assigning values to variable using user input
# c <- scan()
# c
# Assigning sequence of values
x <- 1:6
x
y <- seq(1, 0, -0.2)
y
# Repeat characters
rep("A", 5)
# Repeat a sequence
rep(1:5, 2)
# Repeat elements of a sequence
rep(1:5, rep(2, 5))   # same as rep(1:5, c(2,2,2,2,2))
# Specify repeat times for each elements
rep(c(5, 1, 4), c(6, 1, 2))
worms <- read.table("worms.txt", header = T, row.names = 1)
names(worms)
attach(worms) # Make variables in worms accessible by name
worms
summary(worms)  # Basic statistics of worms
# Select first three column of data frame
worms[, 1:3]
# Select certain rows based on logical tests on variable values
worms[Area > 3 & Slope < 3,]
# Return row indices in incresaing order of column 1 values (Area)
order(worms[,1])
# Sort dataframe in increasing order of column 1 values (Area)
worms[order(worms[,1]),]
# Sort dataframe in decreasing order of column 1 values (Area) and select few columns
worms[rev(order(worms[,1])), c(1, 4, 6)]
# Detach variables in worms dataframe after use
detach(worms)
worms <- read.table("worms.txt", header = T, row.names = 1)
names(worms)
attach(worms) # Make variables in worms accessible by name
worms
summary(worms)  # Basic statistics of worms
# Select first three column of data frame
worms[, 1:3]
# Select certain rows based on logical tests on variable values
worms[Area > 3 & Slope < 3,]
# Return row indices in incresaing order of column 1 values (Area)
order(worms[,1])
# Sort dataframe in increasing order of column 1 values (Area)
worms[order(worms[,1]),]
# Sort dataframe in decreasing order of column 1 values (Area) and select few columns
worms[rev(order(worms[,1])), c(1, 4, 6)]
# Detach variables in worms dataframe after use
detach(worms)
worms <- read.table("worms.txt", header = T, row.names = 1)
names(worms)
attach(worms) # Make variables in worms accessible by name
worms
summary(worms)  # Basic statistics of worms
# Select first three column of data frame
worms[, 1:3]
# Select certain rows based on logical tests on variable values
worms[Area > 3 & Slope < 3,]
# Return row indices in incresaing order of column 1 values (Area)
order(worms[,1])
# Sort dataframe in increasing order of column 1 values (Area)
worms[order(worms[,1]),]
# Sort dataframe in decreasing order of column 1 values (Area) and select few columns
worms[rev(order(worms[,1])), c(1, 4, 6)]
# Detach variables in worms dataframe after use
detach(worms)
# Load data from file
dataframe <- read.table("plotdata.txt", header = T)
# See names of variables in data frame
names(dataframe)
# Attach data objects in data frame into R environment
attach(dataframe)
# Simplest plot
plot(x, y)
# Plotting with labels
plot(x, y, xlab = "x label", ylab = "y label")
# Changing orientation of axis values
plot(x, y, las = 1) # las can be {0, 1, 2, 3}
# Change font size of x and y labels
plot(x, y, cex.lab = 2)
# Load data from file
dataframe <- read.table("plotdata.txt", header = T)
# Load data from file
dataframe <- read.table("plotdata.txt", header = T)
# See names of variables in data frame
names(dataframe)
# Attach data objects in data frame into R environment
attach(dataframe)
# Simplest plot
plot(x, y)
# Plotting with labels
plot(x, y, xlab = "x label", ylab = "y label")
# Changing orientation of axis values
plot(x, y, las = 1) # las can be {0, 1, 2, 3}
# Change font size of x and y labels
plot(x, y, cex.lab = 2)
# Load data from file
dataframe <- read.table("plotdata.txt", header = T)
# See names of variables in data frame
names(dataframe)
# Attach data objects in data frame into R environment
attach(dataframe)
# Simplest plot
plot(x, y)
# Plotting with labels
plot(x, y, xlab = "x label", ylab = "y label")
# Changing orientation of axis values
plot(x, y, las = 1) # las can be {0, 1, 2, 3}
# Change font size of x and y labels
plot(x, y, cex.lab = 2)
2+3
2^3+5
6/2+(8+5)
2 ^ 3 + (5)
scores <- c(22, 34, 18, 29, 36)
scores
names = c("Kevin", "Tom", "Edward", "Jack", "Isaac")
names
mean(scores)
sd(scores)
summary(scores)
Scores = c(23, 34, 18, 29, 33)
cor(scores, Scores)
2+3
2^3+5
6/2+(8+5)
2 ^ 3 + (5)
scores <- c(22, 34, 18, 29, 36)
scores
names = c("Kevin", "Tom", "Edward", "Jack", "Isaac")
names
mean(scores)
sd(scores)
summary(scores)
Scores = c(23, 34, 18, 29, 33)
cor(scores, Scores)
y<-c(5,7,7,8,2,5,6,6,7,5,8,3,4)
x<-13:1
mean(y)
var(x)
y*6
c(y, x)
# Fourth element
y[4]
# Third to seventh elements
y[3:7]
# Individual elements
y[c(3, 5, 7, 8)]
# Drop an element
y[-4]
# Drop first and fourth elements
y[c(-1, -4)]
# Drop the last element
y[-length(y)]
# Get a subset of vector
y[y>6]
# The values of x for which y>6
x[y>6]
# Elements of y which is not multiples of three
y[y%%3 != 0]
A <- array(1:30, c(5,3,2))
A
# Third to fifth rows of 2 tables
A[3:5, ,]
# First and third columns of 2 tables
A[,c(1,3),]
# Select second table
A[,,2]
# Selection of some elements in the tables
A[2:4, c(1,3), 2]
# Remove variables after use
rm(A,x,y)
# Remove all variables
# rm(list = ls())
